#Code for the neural net that determines if a sentence is declaritive or imperative
#Written by Subhan and Matt 7/5/17

from numpy import exp,array,random,dot
 
 
class NeuralNetwork():
    def __init_(self):
        # Seed random number generator
        random.seed(1)
 
        #A single neuron model with 3 inputs and 1 output
        #random weights are assigned to a 3 by 1 matrix, which
        #has values in the range -1 to 1 and a mean of 0
        self.synaptic_weights = 2 * random.random((3,1)) - 1
 
        def __sigmoid(self,x):
            return 1 / (1 + exp(-x))
 
        def __sigmoid_derivative(self,x):
            return x * (1-x)
 
       
        def train(self,training_set_inputs,training_set_outputs, number_of_training_iterations):
            #pass the training set through our neural net
            for iteration in xrange(number_of_training_iterations):
                output = self.think(training_set_inputs)
 
                #calculate the error between the desired output and the predicted output
                error = training_set_outputs - output
 
                #multiply the error by the input and the sigmoid function in order to
                #adjust it by how far away it is from an ideal value
                adjustment = dot(training_set_input.T, error*self.sigmoid_derivative(output))
 
                #adjust the weights
                self.synaptic_weights += adjustment
 
        def think(self,inputs):
            # Pass inputs through our neural network (our single neuron).
            return self.__sigmoid(dot(inputs, self.synaptic_weights))
 
 
 
 
    #Intialise a single neuron neural network.
    neural_network = NeuralNetwork()
 
    print "Random starting synaptic weights: "
    print neural_network.synaptic_weights
 
    # The training set. We have 4 examples, each consisting of 3 input values
    # and 1 output value.
    training_set_inputs = array([[0, 0, 1], [1, 1, 1], [1, 0, 1], [0, 1, 1]])
    training_set_outputs = array([[0, 1, 1, 0]]).T
 
    # Train the neural network using a training set.
    # Do it 10,000 times and make small adjustments each time.
    neural_network.train(training_set_inputs, training_set_outputs, 10000)
 
    print "New synaptic weights after training: "
    print neural_network.synaptic_weights
 
    # Test the neural network with a new situation.
    print "Considering new situation [1, 0, 0] -> ?: "
    print neural_network.think(array([1, 0, 0]))
